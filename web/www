#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('./server/app');
var debug = require('debug')('TestApp:server');
var http = require('http');
var config = require('./server/config');

var logger = require('./server/logger/winston');

var updater = require('./service/playlist/updater');

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Create Socket IO connection
var io = require('socket.io')(server);

updater(io);

server.listen(config.port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof config.port === 'string'
    ? 'Pipe ' + config.port
    : 'Port ' + config.port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;

  console.log(
    "┌───── \u001b[32mconfig\u001b[39m ──────\n" + logConfig(config) + "└───────────────────"
  );

  logger.info('Listening on %s port', bind);
}


function logConfig(cfg,c){
  var offset = c || 0;
  var offset_string = Array(offset + 1).join('──');

  var strout = ''; //'Config loaded:\n';
  for (var k in cfg){
    var val = cfg[k];
    strout += '├'+offset_string;
    if (typeof val == "object")
      strout += ' '+k+':\n'+ logConfig(val,offset+1);
    else
      strout += ' '+k+' "'+val+'"\n';
  }

  return strout
}

String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) {
      return typeof args[number] != 'undefined'
        ? args[number]
        : match
      ;
    });
  };
